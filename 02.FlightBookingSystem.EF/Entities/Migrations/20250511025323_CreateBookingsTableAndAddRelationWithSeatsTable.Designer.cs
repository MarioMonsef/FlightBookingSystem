// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _02.FlightBookingSystem.EF.Entities;

#nullable disable

namespace _02.FlightBookingSystem.EF.Entities.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250511025323_CreateBookingsTableAndAddRelationWithSeatsTable")]
    partial class CreateBookingsTableAndAddRelationWithSeatsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("_01.FlightBookingSystem.Core.Models.Booking.Booking", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("BookingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 5, 11, 2, 53, 23, 381, DateTimeKind.Utc).AddTicks(4205));

                    b.Property<int>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("SeatID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SeatID")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("_01.FlightBookingSystem.Core.Models.Flight.Flight", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ArrivalCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartureCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("flights", t =>
                        {
                            t.HasCheckConstraint("CK_Flight_Price", "Price >= 0");
                        });
                });

            modelBuilder.Entity("_01.FlightBookingSystem.Core.Models.Seat.Seat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("FlightID")
                        .HasColumnType("int");

                    b.Property<bool>("IsBooking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("FlightID");

                    b.ToTable("Seats", t =>
                        {
                            t.HasCheckConstraint("CK_Seat_SeatNumber_Format", "SeatNumber LIKE '[A-Z][0-9][0-9]'");
                        });
                });

            modelBuilder.Entity("_01.FlightBookingSystem.Core.Models.Booking.Booking", b =>
                {
                    b.HasOne("_01.FlightBookingSystem.Core.Models.Seat.Seat", "Seat")
                        .WithOne("Booking")
                        .HasForeignKey("_01.FlightBookingSystem.Core.Models.Booking.Booking", "SeatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("_01.FlightBookingSystem.Core.Models.Seat.Seat", b =>
                {
                    b.HasOne("_01.FlightBookingSystem.Core.Models.Flight.Flight", "Flight")
                        .WithMany("Seats")
                        .HasForeignKey("FlightID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("_01.FlightBookingSystem.Core.Models.Flight.Flight", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("_01.FlightBookingSystem.Core.Models.Seat.Seat", b =>
                {
                    b.Navigation("Booking")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
